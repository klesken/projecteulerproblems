/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projecteulerproblems;

import static java.lang.Math.toIntExact;
import java.util.Arrays;

/*
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
*/
/**
 *
 * @author vikka994
 */
public class Problem44 implements ProjectEulerProblem{
    long d = 0;
    
    private class Pair{
        private final int j,k;
        Pair(int a, int b){
            j = a;
            k = b;
        }
    
        @Override
        public boolean equals(Object o){
            Pair p = (Pair) o;
            return ((j == p.j && k == p.k) || (j == p.k && k == p.j));
        }
        
        @Override
        public int hashCode(){
            return j+k;
        }
        
    }
    
    
    @Override
    public int problem() {
        return 44;
    }

    @Override
    public void solution() {
        System.out.println("D = " + d);
    }
    
    @Override
    public void solve() {
        int amountPentagonGenerated = 10000;
        long[] pentagonNumbers = new long[amountPentagonGenerated];
        for(long i = 0; i < amountPentagonGenerated; i++){
            pentagonNumbers[Math.toIntExact(i)] = pentagonFormula(i);
        }
        
        //Point additionPairs = new Point[amountPentagonGenerated/12];
        
        long maxP = pentagonNumbers[amountPentagonGenerated-1];
        long tempPentN = 0;
        for(int i = 0; i < amountPentagonGenerated; i++){
            for(int j = i+1; j < amountPentagonGenerated; j++){
                tempPentN = pentagonNumbers[i] + pentagonNumbers[j];
                if(tempPentN > maxP) break;
                
                if(Arrays.binarySearch(pentagonNumbers, j+1, amountPentagonGenerated, tempPentN) >= 0){
                    if(Arrays.binarySearch(pentagonNumbers, j+1, amountPentagonGenerated, tempPentN - (pentagonNumbers[j]*2) ) >= 0){
                        d = Math.abs(pentagonNumbers[i] - pentagonNumbers[j]);
                    }                    
                }

                        
            }
        }
        
        
    }
    
    /**
     * Pn=n(3n−1)/2
     * 
     * @param n 
     * 
     * 
     */
    private long pentagonFormula(long n){
        return n*(3*n - 1)/2;
    }
    
    private int derivedPentagonFormula(long n){
        return Math.toIntExact(12*n - 2);
    }


    
}
